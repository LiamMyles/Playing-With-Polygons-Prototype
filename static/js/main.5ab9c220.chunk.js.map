{"version":3,"sources":["Polygon.js","Controls.js","MasterPolygon.js","index.js"],"names":["Polygon","p5Instance","initialPosition","polygonOptions","Object","classCallCheck","this","state","pointsPositions","x","y","cos","sin","currentRotation","currentSize","currentPoints","scalingToMax","p5","polygon","generatePolygon","initialPositions","defaultOptions","defaultPolygon","newInitialPositions","objectSpread","defaultInitialPositions","centre","size","points","newPolygon","status","spin","scale","shape","dots","sides","setInitialPolygonPoints","startingSize","angleBetweenPoints","TWO_PI","polygonPoints","angle","index","floor","push","_this$polygon$status","spinning","scaling","spinPolygon","scalePolygon","newRotation","_newPolygon$spin","speed","isClockwise","Math","round","rotate","newState","newCurrentSize","_this","_newPolygon$scale","_newPolygon$scale$ran","range","max","min","_this$state","newScalingToMax","newPoints","map","point","newPoint","_this2","_this$polygon","_this$polygon$status2","dotsEnabled","sidesEnabled","forEach","_ref","fillColourIndex","fillColours","length","stokeColourIndex","stokeColours","fill","strokeWeight","stroke","ellipse","stokeColour","pos1","pos2","undefined","line","_this$polygon2","_this$polygon2$status","active","paused","_this$polygon2$shape","shapeCentre","_this$state2","translate","updatePolygonPoints","drawPolygon","pop","InteractivePolygon","updatedPolygon","Controls","inputUpdate","e","value","updates","currentTarget","dataset","type","checked","split","colour","trim","filter","isLongEnough","setSpinSpeed","setScaleSpeed","setPointsAmount","setActiveStatus","setPausedStatus","setSpinningStatus","setScalingStatus","setDotsStatus","setSidesStatus","setSpinDirection","setScaleRangeMax","setScaleRangeMin","setDotsStroke","setDotsSize","setSidesStroke","setDotsFillColours","setDotsStrokeColours","setSidesStrokeColours","setShapeCentreX","setShapeCentreY","props","setSpin","parseFloat","setShapeCentre","setScale","setScaleRange","setShape","setDots","setSides","setStatus","react_default","a","createElement","className","Controls_HelpText","controls","control","Controls_InputField","options","onChangeFn","key","concat","Component","defaultProps","title","inputType","inputAttributes","step","defaultValue","group","defaultChecked","InputField","id","Fragment","htmlFor","assign","onChange","data-updates","HelpText","_ref2","hide","href","MasterPolygon","possibleConstructorReturn","getPrototypeOf","call","p5Sketch","createP5Sketch","_InteractivePolygon$d","setup","createCanvas","windowWidth","windowHeight","mouseClicked","background","p5InitialPositions","width","height","setState","draw","sketchRef","React","createRef","current","src_Controls","ref","ReactDOM","render","MasterPolygon_MasterPolygon","document","getElementById"],"mappings":"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","file":"static/js/main.5ab9c220.chunk.js","sourcesContent":["class Polygon {\r\n  //Used as the base options when building the polygon\r\n  static defaultInitialPositions = {\r\n    centre: { x: 0, y: 0 },\r\n    size: 50,\r\n    points: 6\r\n  }\r\n  //Used as the base option when building the polygon\r\n  static defaultPolygon = {\r\n    status: {\r\n      active: true,\r\n      paused: false,\r\n      spinning: true,\r\n      scaling: true,\r\n      dotsEnabled: true,\r\n      sidesEnabled: true\r\n    },\r\n    spin: {\r\n      speed: 0.01,\r\n      isClockwise: true\r\n    },\r\n    scale: {\r\n      range: { max: 200, min: 50 },\r\n      speed: 2\r\n    },\r\n    shape: {\r\n      centre: { x: 0, y: 0 },\r\n      points: 6\r\n    },\r\n    dots: {\r\n      fillColours: [\"DarkOrange\", \"DarkSeaGreen\"],\r\n      stokeColours: [\"DarkViolet\", \"FloralWhite\"],\r\n      strokeWeight: 0.5,\r\n      size: 3\r\n    },\r\n    sides: {\r\n      stokeColours: [\"Indigo\", \"Khaki\", \"LawnGreen\"],\r\n      strokeWeight: 0.1\r\n    }\r\n  }\r\n\r\n  state = {\r\n    pointsPositions: [{ x: 0, y: 0, cos: 0, sin: 0 }],\r\n    currentRotation: 50,\r\n    currentSize: 50,\r\n    currentPoints: 6,\r\n    scalingToMax: true\r\n  }\r\n\r\n  constructor(p5Instance, initialPosition, polygonOptions) {\r\n    this.p5 = p5Instance\r\n    this.polygon = this.generatePolygon(polygonOptions, initialPosition)\r\n  }\r\n\r\n  /**\r\n   * Takes in an object of options for setting up the polygon and uses\r\n   * them to generate the polygon\r\n   *\r\n   * @param {Object} polygonOptions Complex object similar to this.polygon\r\n   */\r\n  generatePolygon(polygonOptions, initialPositions) {\r\n    const defaultOptions = Polygon.defaultPolygon\r\n\r\n    //@ToDO This Needs to get put into global state because the center value is\r\n    // being used elsewhere. This isn't ideal, but for now this will be okay\r\n    const newInitialPositions = {\r\n      ...Polygon.defaultInitialPositions,\r\n      ...initialPositions,\r\n      ...{\r\n        centre: {\r\n          ...Polygon.defaultInitialPositions.centre,\r\n          ...initialPositions.centre\r\n        }\r\n      }\r\n    }\r\n    this.initialPositions = newInitialPositions\r\n    const { size, points } = newInitialPositions\r\n\r\n    const newPolygon = {\r\n      ...{\r\n        status: {\r\n          ...defaultOptions.status,\r\n          ...polygonOptions.status\r\n        },\r\n        spin: {\r\n          ...defaultOptions.spin,\r\n          ...polygonOptions.spin\r\n        },\r\n        scale: {\r\n          ...defaultOptions.scale,\r\n          ...polygonOptions.scale\r\n        },\r\n        shape: {\r\n          ...defaultOptions.shape,\r\n          ...polygonOptions.shape\r\n        },\r\n        dots: {\r\n          ...defaultOptions.dots,\r\n          ...polygonOptions.dots\r\n        },\r\n        sides: {\r\n          ...defaultOptions.sides,\r\n          ...polygonOptions.sides\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setInitialPolygonPoints(points, size)\r\n    return newPolygon\r\n  }\r\n\r\n  /**\r\n   * generates the initial points for the polygon, including there cos and sin angles\r\n   * which will be used in later calculations.\r\n   *\r\n   * Cos and Sin operations are quite intensive so caching these values helps performance\r\n   */\r\n  setInitialPolygonPoints(sides, startingSize) {\r\n    const angleBetweenPoints = this.p5.TWO_PI / sides\r\n    let polygonPoints = []\r\n    let angle = angleBetweenPoints\r\n    for (let index = 1; index <= sides; index++) {\r\n      angle += angleBetweenPoints\r\n      let cos = this.p5.cos(angle)\r\n      let sin = this.p5.sin(angle)\r\n      let x = this.p5.floor(cos * startingSize)\r\n      let y = this.p5.floor(sin * startingSize)\r\n\r\n      polygonPoints.push({ x, y, cos, sin })\r\n    }\r\n\r\n    this.state.pointsPositions = polygonPoints\r\n    this.state.currentPoints = sides\r\n  }\r\n\r\n  /**\r\n   * Applies all of the updates to the points of the polygon that would happen\r\n   * in the next cycle\r\n   *\r\n   * @memberof Polygon\r\n   */\r\n  updatePolygonPoints() {\r\n    const { spinning, scaling } = this.polygon.status\r\n    // I'm going to need to do the rotate as part of the draw loop.\r\n    let newPolygon = { ...this.polygon }\r\n\r\n    if (spinning) {\r\n      newPolygon = this.spinPolygon(newPolygon)\r\n    }\r\n\r\n    if (scaling) {\r\n      newPolygon = this.scalePolygon(newPolygon)\r\n    }\r\n\r\n    this.polygon = newPolygon\r\n  }\r\n\r\n  /**\r\n   * Controls the logic for spinning the polygon around.\r\n   *\r\n   * @param {Object} polygon\r\n   * @returns new and updated polygon object derived from the one passed\r\n   */\r\n  spinPolygon(polygon) {\r\n    const newPolygon = { ...polygon }\r\n    const {\r\n      spin: { speed, isClockwise }\r\n    } = newPolygon\r\n    const { currentRotation } = this.state\r\n\r\n    let newRotation\r\n    if (isClockwise) {\r\n      newRotation = currentRotation + speed\r\n    } else {\r\n      newRotation = currentRotation - speed\r\n    }\r\n    // Smooths out the rotation by applying the amountOver to the new rotation\r\n    if (newRotation >= 360 || newRotation <= -360) {\r\n      const amountOver = currentRotation - 360\r\n      newRotation = 0 + amountOver\r\n    }\r\n    //Round to 3 floating points\r\n    newRotation = Math.round(newRotation * 1000) / 1000\r\n    this.p5.rotate(newRotation)\r\n    const newState = { ...this.state }\r\n    newState.currentRotation = newRotation\r\n    this.state = newState\r\n    return newPolygon\r\n  }\r\n\r\n  /**\r\n   * Deals with all the scaling calculations of the points. Including phasing between\r\n   * moving towards Max and min scale\r\n   *\r\n   * @param {Object} polygon\r\n   * @returns new and updated polygon object derived from the one passed\r\n   */\r\n  scalePolygon(polygon) {\r\n    const newPolygon = { ...polygon }\r\n    const {\r\n      scale: {\r\n        range: { max, min },\r\n        speed\r\n      }\r\n    } = newPolygon\r\n\r\n    const { pointsPositions, currentSize, scalingToMax } = this.state\r\n\r\n    let newCurrentSize\r\n    if (scalingToMax) {\r\n      newCurrentSize = currentSize + speed\r\n    } else {\r\n      newCurrentSize = currentSize - speed\r\n    }\r\n\r\n    let newScalingToMax = scalingToMax\r\n    if (newCurrentSize > max || newCurrentSize < min) {\r\n      newScalingToMax = !scalingToMax\r\n    }\r\n    //If the size changes dramatically it will correct to the new max\r\n    if (newCurrentSize > max + speed * 2) {\r\n      newCurrentSize = max\r\n    }\r\n    //If the size changes dramatically it will correct to the new min\r\n    if (newCurrentSize < min - speed * 2) {\r\n      newCurrentSize = min\r\n    }\r\n    const newPoints = pointsPositions.map(point => {\r\n      let newPoint = { ...point }\r\n      newPoint.x = this.p5.floor(point.cos * newCurrentSize)\r\n      newPoint.y = this.p5.floor(point.sin * newCurrentSize)\r\n      return newPoint\r\n    })\r\n\r\n    const newState = { ...this.state }\r\n    newState.currentSize = newCurrentSize\r\n    newState.scalingToMax = newScalingToMax\r\n    newState.pointsPositions = newPoints\r\n\r\n    this.state = newState\r\n    return newPolygon\r\n  }\r\n  /**\r\n   * Draws the Polygon to the p5 canvas#\r\n   *\r\n   * Needs to run inside p5.push/p5.pop to generate the objects\r\n   *\r\n   * @memberof Polygon\r\n   */\r\n  drawPolygon() {\r\n    const { dots, sides } = this.polygon\r\n    const { dotsEnabled, sidesEnabled } = this.polygon.status\r\n    const { pointsPositions } = this.state\r\n    pointsPositions.forEach(({ x, y }, index) => {\r\n      if (dotsEnabled) {\r\n        const fillColourIndex = index % dots.fillColours.length\r\n        const stokeColourIndex = index % dots.stokeColours.length\r\n        this.p5.fill(dots.fillColours[fillColourIndex])\r\n        this.p5.strokeWeight(dots.strokeWeight)\r\n        this.p5.stroke(dots.stokeColours[stokeColourIndex])\r\n        this.p5.ellipse(x, y, dots.size)\r\n      }\r\n\r\n      if (sidesEnabled) {\r\n        const stokeColour = index % sides.stokeColours.length\r\n        this.p5.stroke(sides.stokeColours[stokeColour])\r\n        this.p5.strokeWeight(sides.strokeWeight)\r\n        let pos1 = pointsPositions[index]\r\n        let pos2 =\r\n          pointsPositions[index + 1] === undefined\r\n            ? pointsPositions[0]\r\n            : pointsPositions[index + 1]\r\n        this.p5.line(pos1.x, pos1.y, pos2.x, pos2.y)\r\n      }\r\n    })\r\n  }\r\n  /**\r\n   * For use with draw function in the sketch\r\n   */\r\n  draw() {\r\n    const {\r\n      status: { active, paused },\r\n      shape: { centre: shapeCentre, points }\r\n    } = this.polygon\r\n    const { currentPoints, currentSize } = this.state\r\n\r\n    const { centre } = this.initialPositions\r\n    if (active && currentPoints === points) {\r\n      this.p5.push()\r\n      //Translate needs to happen before draw\r\n      this.p5.translate(centre.x, centre.y)\r\n      this.p5.translate(shapeCentre.x, shapeCentre.y)\r\n      if (!paused) {\r\n        this.updatePolygonPoints()\r\n      }\r\n      this.drawPolygon()\r\n      this.p5.pop()\r\n    } else if (currentPoints !== points) {\r\n      this.setInitialPolygonPoints(points, currentSize)\r\n    }\r\n  }\r\n}\r\n\r\nclass InteractivePolygon extends Polygon {\r\n  //Might be better to look at a reducer pattern that redux uses for this.\r\n  //I could just use redux full stop, but I'm not sure its necessary yet.\r\n  //I'm more just looking for a clean pattern to apply these changes.\r\n  setStatus(status) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      status: {\r\n        ...this.polygon.status,\r\n        ...status\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setSpin(spin) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      spin: {\r\n        ...this.polygon.spin,\r\n        ...spin\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setScale(scale) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      scale: {\r\n        ...this.polygon.scale,\r\n        ...scale\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setScaleRange(range) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      scale: {\r\n        ...this.polygon.scale,\r\n        range: {\r\n          ...this.polygon.scale.range,\r\n          ...range\r\n        }\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setShape(shape) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      shape: {\r\n        ...this.polygon.shape,\r\n        ...shape\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setShapeCentre(centre) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      shape: {\r\n        ...this.polygon.shape,\r\n        centre: {\r\n          ...this.polygon.shape.centre,\r\n          ...centre\r\n        }\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setDots(dots) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      dots: {\r\n        ...this.polygon.dots,\r\n        ...dots\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n  setSides(sides) {\r\n    const updatedPolygon = {\r\n      ...this.polygon,\r\n      sides: {\r\n        ...this.polygon.sides,\r\n        ...sides\r\n      }\r\n    }\r\n    this.polygon = updatedPolygon\r\n  }\r\n}\r\n\r\nexport { Polygon, InteractivePolygon }\r\n","import React, { Component } from \"react\"\r\n\r\nclass Controls extends Component {\r\n  static defaultProps = {\r\n    controls: [\r\n      {\r\n        title: \"Spin Speed\",\r\n        inputType: \"range\",\r\n        inputAttributes: {\r\n          min: 0.001,\r\n          max: 0.1,\r\n          step: 0.001,\r\n          defaultValue: 0.01\r\n        },\r\n        updates: \"spinSpeed\",\r\n        group: \"spin\"\r\n      },\r\n      {\r\n        title: \"Scale Speed\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 0.1, max: 5, step: 0.1, defaultValue: 2 },\r\n        updates: \"scaleSpeed\"\r\n      },\r\n      {\r\n        title: \"Spin Clockwise\",\r\n        inputType: \"checkbox\",\r\n        inputAttributes: { defaultChecked: true },\r\n        updates: \"spinDirection\",\r\n        group: \"spin\"\r\n      },\r\n      {\r\n        title: \"Scale Max\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 200, max: 500, step: 1, defaultValue: 200 },\r\n        updates: \"scaleRangeMax\"\r\n      },\r\n      {\r\n        title: \"Spinning\",\r\n        inputType: \"checkbox\",\r\n        inputAttributes: { defaultChecked: true },\r\n        updates: \"spinningStatus\"\r\n      },\r\n      {\r\n        title: \"Scale Min\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 0, max: 200, step: 1, defaultValue: 50 },\r\n        updates: \"scaleRangeMin\"\r\n      },\r\n\r\n      {\r\n        title: \"Points Amount\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 2, max: 12, step: 1, defaultValue: 6 },\r\n        updates: \"pointsAmount\"\r\n      },\r\n      {\r\n        title: \"Scaling\",\r\n        inputType: \"checkbox\",\r\n        inputAttributes: { defaultChecked: true },\r\n        updates: \"scalingStatus\"\r\n      },\r\n      {\r\n        title: \"Dots Enabled\",\r\n        inputType: \"checkbox\",\r\n        inputAttributes: { defaultChecked: true },\r\n        updates: \"dotsStatus\"\r\n      },\r\n      {\r\n        title: \"Shape Y\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: -400, max: 400, step: 1, defaultValue: 0 },\r\n        updates: \"shapeCentreY\"\r\n      },\r\n      {\r\n        title: \"Dots Size\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 1, max: 20, step: 0.5, defaultValue: 3 },\r\n        updates: \"dotsSize\"\r\n      },\r\n      {\r\n        title: \"Shape X\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: -400, max: 400, step: 1, defaultValue: 0 },\r\n        updates: \"shapeCentreX\"\r\n      },\r\n      {\r\n        title: \"Dots Stroke\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 0, max: 10, step: 0.5, defaultValue: 0.5 },\r\n        updates: \"dotsStroke\"\r\n      },\r\n      {\r\n        title: \"Sides Enabled\",\r\n        inputType: \"checkbox\",\r\n        inputAttributes: { defaultChecked: true },\r\n        updates: \"sidesStatus\"\r\n      },\r\n      {\r\n        title: \"Dots Fill Colour\",\r\n        inputType: \"text\",\r\n        inputAttributes: { defaultValue: \"DarkOrange, DarkSeaGreen\" },\r\n        updates: \"dotsFillColours\"\r\n      },\r\n      {\r\n        title: \"Sides Stroke\",\r\n        inputType: \"range\",\r\n        inputAttributes: { min: 0.1, max: 10, step: 0.1, defaultValue: 0.1 },\r\n        updates: \"sidesStroke\"\r\n      },\r\n      {\r\n        title: \"Dots Stroke Colour\",\r\n        inputType: \"text\",\r\n        inputAttributes: { defaultValue: \"DarkViolet\" },\r\n        updates: \"dotsStrokeColours\"\r\n      },\r\n      {\r\n        title: \"Side Stroke Colour\",\r\n        inputType: \"text\",\r\n        inputAttributes: { defaultValue: \"Indigo, Khaki, LawnGreen\" },\r\n        updates: \"sidesStrokeColours\"\r\n      },\r\n      {\r\n        title: \"Active\",\r\n        inputType: \"checkbox\",\r\n        inputAttributes: { defaultChecked: true },\r\n        updates: \"activeStatus\"\r\n      }\r\n    ]\r\n  }\r\n  inputUpdate = e => {\r\n    const updates = e.currentTarget.dataset.updates\r\n    let value\r\n\r\n    switch (e.currentTarget.type) {\r\n      case \"checkbox\":\r\n        value = e.currentTarget.checked\r\n        break\r\n      case \"text\": {\r\n        const textValue = e.currentTarget.value\r\n        value = textValue\r\n          .split(\",\")\r\n          .map(colour => colour.trim())\r\n          .filter(colour => {\r\n            let isLongEnough = true\r\n            if (colour.length <= 3) {\r\n              isLongEnough = false\r\n            }\r\n            return isLongEnough\r\n          })\r\n        if (value.length <= 0) {\r\n          value = [\"white\"]\r\n        }\r\n        break\r\n      }\r\n      default:\r\n        value = e.currentTarget.value\r\n    }\r\n\r\n    switch (updates) {\r\n      case \"spinSpeed\":\r\n        this.setSpinSpeed(value)\r\n        break\r\n      case \"scaleSpeed\":\r\n        this.setScaleSpeed(value)\r\n        break\r\n      case \"pointsAmount\":\r\n        this.setPointsAmount(value)\r\n        break\r\n      case \"activeStatus\":\r\n        this.setActiveStatus(value)\r\n        break\r\n      case \"pausedStatus\":\r\n        this.setPausedStatus(value)\r\n        break\r\n      case \"spinningStatus\":\r\n        this.setSpinningStatus(value)\r\n        break\r\n      case \"scalingStatus\":\r\n        this.setScalingStatus(value)\r\n        break\r\n      case \"dotsStatus\":\r\n        this.setDotsStatus(value)\r\n        break\r\n      case \"sidesStatus\":\r\n        this.setSidesStatus(value)\r\n        break\r\n      case \"spinDirection\":\r\n        this.setSpinDirection(value)\r\n        break\r\n      case \"scaleRangeMax\":\r\n        this.setScaleRangeMax(value)\r\n        break\r\n      case \"scaleRangeMin\":\r\n        this.setScaleRangeMin(value)\r\n        break\r\n      case \"dotsStroke\":\r\n        this.setDotsStroke(value)\r\n        break\r\n      case \"dotsSize\":\r\n        this.setDotsSize(value)\r\n        break\r\n      case \"sidesStroke\":\r\n        this.setSidesStroke(value)\r\n        break\r\n      case \"dotsFillColours\":\r\n        this.setDotsFillColours(value)\r\n        break\r\n      case \"dotsStrokeColours\":\r\n        this.setDotsStrokeColours(value)\r\n        break\r\n      case \"sidesStrokeColours\":\r\n        this.setSidesStrokeColours(value)\r\n        break\r\n      case \"shapeCentreX\":\r\n        this.setShapeCentreX(value)\r\n        break\r\n      case \"shapeCentreY\":\r\n        this.setShapeCentreY(value)\r\n        break\r\n      default:\r\n        return\r\n    }\r\n  }\r\n\r\n  setSpinSpeed(value) {\r\n    this.props.polygon.setSpin({ speed: parseFloat(value) })\r\n  }\r\n  setShapeCentreX(value) {\r\n    this.props.polygon.setShapeCentre({ x: parseFloat(value) })\r\n  }\r\n  setShapeCentreY(value) {\r\n    this.props.polygon.setShapeCentre({ y: parseFloat(value) })\r\n  }\r\n  setSpinDirection(value) {\r\n    this.props.polygon.setSpin({ isClockwise: value })\r\n  }\r\n  setScaleSpeed(value) {\r\n    this.props.polygon.setScale({ speed: parseFloat(value) })\r\n  }\r\n  setScaleRangeMax(value) {\r\n    this.props.polygon.setScaleRange({ max: parseFloat(value) })\r\n  }\r\n  setScaleRangeMin(value) {\r\n    this.props.polygon.setScaleRange({ min: parseFloat(value) })\r\n  }\r\n  setPointsAmount(value) {\r\n    this.props.polygon.setShape({ points: parseFloat(value) })\r\n  }\r\n  setDotsSize(value) {\r\n    this.props.polygon.setDots({ size: parseFloat(value) })\r\n  }\r\n  setDotsFillColours(value) {\r\n    this.props.polygon.setDots({ fillColours: value })\r\n  }\r\n  setDotsStrokeColours(value) {\r\n    this.props.polygon.setDots({ stokeColours: value })\r\n  }\r\n  setSidesStrokeColours(value) {\r\n    this.props.polygon.setSides({ stokeColours: value })\r\n  }\r\n  setDotsStroke(value) {\r\n    this.props.polygon.setDots({ strokeWeight: parseFloat(value) })\r\n  }\r\n  setActiveStatus(value) {\r\n    this.props.polygon.setStatus({ active: value })\r\n  }\r\n  setPausedStatus(value) {\r\n    this.props.polygon.setStatus({ paused: value })\r\n  }\r\n  setSpinningStatus(value) {\r\n    this.props.polygon.setStatus({ spinning: value })\r\n  }\r\n  setScalingStatus(value) {\r\n    this.props.polygon.setStatus({ scaling: value })\r\n  }\r\n  setDotsStatus(value) {\r\n    this.props.polygon.setStatus({ dotsEnabled: value })\r\n  }\r\n  setSidesStatus(value) {\r\n    this.props.polygon.setStatus({ sidesEnabled: value })\r\n  }\r\n\r\n  setSidesStroke(value) {\r\n    this.props.polygon.setSides({ strokeWeight: parseFloat(value) })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"controls\">\r\n        <h1>Playing with Polygons You Control!</h1>\r\n        <HelpText />\r\n        <fieldset>\r\n          <div>\r\n            {this.props.controls.map((control, index) => {\r\n              return (\r\n                <InputField\r\n                  options={control}\r\n                  index={index}\r\n                  onChangeFn={this.inputUpdate}\r\n                  key={`control${index + 1}`}\r\n                />\r\n              )\r\n            })}\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst InputField = ({ options, index, onChangeFn }) => {\r\n  const { title, inputAttributes, updates, inputType, group } = options\r\n  const id = `controlLabel${index + 1}`\r\n  return (\r\n    <>\r\n      <label htmlFor={id} className={`label-${group}`}>\r\n        {title}\r\n      </label>\r\n      <input\r\n        {...inputAttributes}\r\n        id={id}\r\n        type={inputType}\r\n        onChange={onChangeFn}\r\n        data-updates={updates}\r\n        className={`input-${group}`}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst HelpText = ({ hide }) => (\r\n  <>\r\n    {hide ? null : (\r\n      <>\r\n        <p>Thanks for Checking out my little demo!</p>\r\n        <p>This is a mid way prototype but I hope you have fun all the same</p>\r\n        <p>Tweak around with the sliders and see what shapes you can make</p>\r\n        <p>\r\n          <strong>Click the Display Area to wipe it clean</strong>\r\n        </p>\r\n        <p>\r\n          Try Adding colour, you can use HEX or words{\" \"}\r\n          <a href=\"https://www.w3schools.com/colors/colors_hex.asp\">\r\n            CSS's Named Colours\r\n          </a>{\" \"}\r\n          be sure to separate each colour by (<strong>,</strong>)\r\n        </p>\r\n        <p>\r\n          Some colours to start you off are{\" \"}\r\n          <strong>Gold, Maroon, Azure, MidnightBlue, DarkOrchid </strong>\r\n        </p>\r\n      </>\r\n    )}\r\n  </>\r\n)\r\n\r\nexport default Controls\r\n","import React, { Component } from \"react\";\r\nimport { InteractivePolygon } from \"./Polygon\";\r\n\r\nimport Controls from \"./Controls\";\r\n\r\nimport p5 from \"p5\";\r\n\r\nexport default class MasterPolygon extends Component {\r\n  state = {\r\n    polygon: {},\r\n    controls: {\r\n      status: {\r\n        active: true,\r\n        paused: false,\r\n        spinning: true,\r\n        scaling: true,\r\n        dotsEnabled: true,\r\n        sidesEnabled: true\r\n      },\r\n      spin: {\r\n        speed: 1,\r\n        isClockwise: true\r\n      },\r\n      scale: {\r\n        range: { max: 100, min: 50 },\r\n        speed: 2\r\n      },\r\n      shape: {\r\n        centre: { x: 0, y: 0 },\r\n        points: 6\r\n      },\r\n      dots: {\r\n        fillColours: [\"#000\", \"#fff\"],\r\n        stokeColours: [\"#000\", \"#fff\"],\r\n        strokeWeight: 0.5,\r\n        size: 3\r\n      },\r\n      sides: {\r\n        stokeColours: [\"#000\", \"#fff\"],\r\n        strokeWeight: 0.1\r\n      }\r\n    },\r\n    p5Sketch: {}\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      p5Sketch: new p5(this.createP5Sketch, this.sketchRef.current)\r\n    });\r\n  }\r\n\r\n  createP5Sketch = p5Instance => {\r\n    let polygon = {};\r\n    const {\r\n      initialPositions,\r\n      spin,\r\n      scale,\r\n      status,\r\n      dots,\r\n      sides,\r\n      shape\r\n    } = InteractivePolygon.defaultPolygon;\r\n\r\n    const options = {\r\n      spin,\r\n      scale,\r\n      status,\r\n      dots,\r\n      sides,\r\n      shape\r\n    };\r\n    p5Instance.setup = () => {\r\n      const canvas = p5Instance.createCanvas(\r\n        p5Instance.windowWidth,\r\n        p5Instance.windowHeight / 2\r\n      );\r\n\r\n      canvas.mouseClicked(() => {\r\n        p5Instance.background(230);\r\n      });\r\n\r\n      const p5InitialPositions = {\r\n        ...initialPositions,\r\n        ...{\r\n          centre: {\r\n            x: p5Instance.width / 2,\r\n            y: p5Instance.height / 2\r\n          }\r\n        }\r\n      };\r\n\r\n      polygon = new InteractivePolygon(p5Instance, p5InitialPositions, options);\r\n      this.setState({ polygon });\r\n      p5Instance.background(230);\r\n    };\r\n    p5Instance.draw = () => {\r\n      polygon.draw();\r\n    };\r\n  };\r\n  render() {\r\n    const { polygon } = this.state;\r\n    return (\r\n      <>\r\n        <Controls polygon={polygon} />\r\n        <div ref={this.sketchRef} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport \"./App.scss\";\r\nimport App from \"./MasterPolygon\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}