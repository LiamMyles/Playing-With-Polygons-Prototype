(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,s){e.exports=s(20)},16:function(e,t,s){},18:function(e,t,s){},20:function(e,t,s){"use strict";s.r(t);var a=s(0),n=s.n(a),o=s(9),i=s.n(o),l=(s(16),s(18),s(1)),r=s(2),u=s(3),p=s(5),c=s(4),h=s(6),d=function(){function e(t,s,a){Object(r.a)(this,e),this.state={pointsPositions:[{x:0,y:0,cos:0,sin:0}],currentRotation:50,currentSize:50,currentPoints:6,scalingToMax:!0},this.p5=t,this.polygon=this.generatePolygon(a,s)}return Object(u.a)(e,[{key:"generatePolygon",value:function(t,s){var a=e.defaultPolygon,n=Object(l.a)({},e.defaultInitialPositions,s,{centre:Object(l.a)({},e.defaultInitialPositions.centre,s.centre)});this.initialPositions=n;var o=n.size,i=n.points,r=Object(l.a)({},{status:Object(l.a)({},a.status,t.status),spin:Object(l.a)({},a.spin,t.spin),scale:Object(l.a)({},a.scale,t.scale),shape:Object(l.a)({},a.shape,t.shape),dots:Object(l.a)({},a.dots,t.dots),sides:Object(l.a)({},a.sides,t.sides)});return this.setInitialPolygonPoints(i,o),r}},{key:"setInitialPolygonPoints",value:function(e,t){for(var s=this.p5.TWO_PI/e,a=[],n=s,o=1;o<=e;o++){n+=s;var i=this.p5.cos(n),l=this.p5.sin(n),r=this.p5.floor(i*t),u=this.p5.floor(l*t);a.push({x:r,y:u,cos:i,sin:l})}this.state.pointsPositions=a,this.state.currentPoints=e}},{key:"updatePolygonPoints",value:function(){var e=this.polygon.status,t=e.spinning,s=e.scaling,a=Object(l.a)({},this.polygon);t&&(a=this.spinPolygon(a)),s&&(a=this.scalePolygon(a)),this.polygon=a}},{key:"spinPolygon",value:function(e){var t,s=Object(l.a)({},e),a=s.spin,n=a.speed,o=a.isClockwise,i=this.state.currentRotation;((t=o?i+n:i-n)>=360||t<=-360)&&(t=0+(i-360));t=Math.round(1e3*t)/1e3,this.p5.rotate(t);var r=Object(l.a)({},this.state);return r.currentRotation=t,this.state=r,s}},{key:"scalePolygon",value:function(e){var t,s=this,a=Object(l.a)({},e),n=a.scale,o=n.range,i=o.max,r=o.min,u=n.speed,p=this.state,c=p.pointsPositions,h=p.currentSize,d=p.scalingToMax,g=d;((t=d?h+u:h-u)>i||t<r)&&(g=!d),t>i+2*u&&(t=i),t<r-2*u&&(t=r);var y=c.map(function(e){var a=Object(l.a)({},e);return a.x=s.p5.floor(e.cos*t),a.y=s.p5.floor(e.sin*t),a}),k=Object(l.a)({},this.state);return k.currentSize=t,k.scalingToMax=g,k.pointsPositions=y,this.state=k,a}},{key:"drawPolygon",value:function(){var e=this,t=this.polygon,s=t.dots,a=t.sides,n=this.polygon.status,o=n.dotsEnabled,i=n.sidesEnabled,l=this.state.pointsPositions;l.forEach(function(t,n){var r=t.x,u=t.y;if(o){var p=n%s.fillColours.length,c=n%s.stokeColours.length;e.p5.fill(s.fillColours[p]),e.p5.strokeWeight(s.strokeWeight),e.p5.stroke(s.stokeColours[c]),e.p5.ellipse(r,u,s.size)}if(i){var h=n%a.stokeColours.length;e.p5.stroke(a.stokeColours[h]),e.p5.strokeWeight(a.strokeWeight);var d=l[n],g=void 0===l[n+1]?l[0]:l[n+1];e.p5.line(d.x,d.y,g.x,g.y)}})}},{key:"draw",value:function(){var e=this.polygon,t=e.status,s=t.active,a=t.paused,n=e.shape,o=n.centre,i=n.points,l=this.state,r=l.currentPoints,u=l.currentSize,p=this.initialPositions.centre;s&&r===i?(this.p5.push(),this.p5.translate(p.x,p.y),this.p5.translate(o.x,o.y),a||this.updatePolygonPoints(),this.drawPolygon(),this.p5.pop()):r!==i&&this.setInitialPolygonPoints(i,u)}}]),e}();d.defaultInitialPositions={centre:{x:0,y:0},size:50,points:6},d.defaultPolygon={status:{active:!0,paused:!1,spinning:!0,scaling:!0,dotsEnabled:!0,sidesEnabled:!0},spin:{speed:.01,isClockwise:!0},scale:{range:{max:200,min:50},speed:2},shape:{centre:{x:0,y:0},points:6},dots:{fillColours:["DarkOrange","DarkSeaGreen"],stokeColours:["DarkViolet","FloralWhite"],strokeWeight:.5,size:3},sides:{stokeColours:["Indigo","Khaki","LawnGreen"],strokeWeight:.1}};var g=function(e){function t(){return Object(r.a)(this,t),Object(p.a)(this,Object(c.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(u.a)(t,[{key:"setStatus",value:function(e){var t=Object(l.a)({},this.polygon,{status:Object(l.a)({},this.polygon.status,e)});this.polygon=t}},{key:"setSpin",value:function(e){var t=Object(l.a)({},this.polygon,{spin:Object(l.a)({},this.polygon.spin,e)});this.polygon=t}},{key:"setScale",value:function(e){var t=Object(l.a)({},this.polygon,{scale:Object(l.a)({},this.polygon.scale,e)});this.polygon=t}},{key:"setScaleRange",value:function(e){var t=Object(l.a)({},this.polygon,{scale:Object(l.a)({},this.polygon.scale,{range:Object(l.a)({},this.polygon.scale.range,e)})});this.polygon=t}},{key:"setShape",value:function(e){var t=Object(l.a)({},this.polygon,{shape:Object(l.a)({},this.polygon.shape,e)});this.polygon=t}},{key:"setShapeCentre",value:function(e){var t=Object(l.a)({},this.polygon,{shape:Object(l.a)({},this.polygon.shape,{centre:Object(l.a)({},this.polygon.shape.centre,e)})});this.polygon=t}},{key:"setDots",value:function(e){var t=Object(l.a)({},this.polygon,{dots:Object(l.a)({},this.polygon.dots,e)});this.polygon=t}},{key:"setSides",value:function(e){var t=Object(l.a)({},this.polygon,{sides:Object(l.a)({},this.polygon.sides,e)});this.polygon=t}}]),t}(d),y=function(e){function t(){var e,s;Object(r.a)(this,t);for(var a=arguments.length,n=new Array(a),o=0;o<a;o++)n[o]=arguments[o];return(s=Object(p.a)(this,(e=Object(c.a)(t)).call.apply(e,[this].concat(n)))).inputUpdate=function(e){var t,a=e.currentTarget.dataset.updates;switch(e.currentTarget.type){case"checkbox":t=e.currentTarget.checked;break;case"text":(t=e.currentTarget.value.split(",").map(function(e){return e.trim()}).filter(function(e){var t=!0;return e.length<=3&&(t=!1),t})).length<=0&&(t=["white"]);break;default:t=e.currentTarget.value}switch(a){case"spinSpeed":s.setSpinSpeed(t);break;case"scaleSpeed":s.setScaleSpeed(t);break;case"pointsAmount":s.setPointsAmount(t);break;case"activeStatus":s.setActiveStatus(t);break;case"pausedStatus":s.setPausedStatus(t);break;case"spinningStatus":s.setSpinningStatus(t);break;case"scalingStatus":s.setScalingStatus(t);break;case"dotsStatus":s.setDotsStatus(t);break;case"sidesStatus":s.setSidesStatus(t);break;case"spinDirection":s.setSpinDirection(t);break;case"scaleRangeMax":s.setScaleRangeMax(t);break;case"scaleRangeMin":s.setScaleRangeMin(t);break;case"dotsStroke":s.setDotsStroke(t);break;case"dotsSize":s.setDotsSize(t);break;case"sidesStroke":s.setSidesStroke(t);break;case"dotsFillColours":s.setDotsFillColours(t);break;case"dotsStrokeColours":s.setDotsStrokeColours(t);break;case"sidesStrokeColours":s.setSidesStrokeColours(t);break;case"shapeCentreX":s.setShapeCentreX(t);break;case"shapeCentreY":s.setShapeCentreY(t);break;default:return}},s}return Object(h.a)(t,e),Object(u.a)(t,[{key:"setSpinSpeed",value:function(e){this.props.polygon.setSpin({speed:parseFloat(e)})}},{key:"setShapeCentreX",value:function(e){this.props.polygon.setShapeCentre({x:parseFloat(e)})}},{key:"setShapeCentreY",value:function(e){this.props.polygon.setShapeCentre({y:parseFloat(e)})}},{key:"setSpinDirection",value:function(e){this.props.polygon.setSpin({isClockwise:e})}},{key:"setScaleSpeed",value:function(e){this.props.polygon.setScale({speed:parseFloat(e)})}},{key:"setScaleRangeMax",value:function(e){this.props.polygon.setScaleRange({max:parseFloat(e)})}},{key:"setScaleRangeMin",value:function(e){this.props.polygon.setScaleRange({min:parseFloat(e)})}},{key:"setPointsAmount",value:function(e){this.props.polygon.setShape({points:parseFloat(e)})}},{key:"setDotsSize",value:function(e){this.props.polygon.setDots({size:parseFloat(e)})}},{key:"setDotsFillColours",value:function(e){this.props.polygon.setDots({fillColours:e})}},{key:"setDotsStrokeColours",value:function(e){this.props.polygon.setDots({stokeColours:e})}},{key:"setSidesStrokeColours",value:function(e){this.props.polygon.setSides({stokeColours:e})}},{key:"setDotsStroke",value:function(e){this.props.polygon.setDots({strokeWeight:parseFloat(e)})}},{key:"setActiveStatus",value:function(e){this.props.polygon.setStatus({active:e})}},{key:"setPausedStatus",value:function(e){this.props.polygon.setStatus({paused:e})}},{key:"setSpinningStatus",value:function(e){this.props.polygon.setStatus({spinning:e})}},{key:"setScalingStatus",value:function(e){this.props.polygon.setStatus({scaling:e})}},{key:"setDotsStatus",value:function(e){this.props.polygon.setStatus({dotsEnabled:e})}},{key:"setSidesStatus",value:function(e){this.props.polygon.setStatus({sidesEnabled:e})}},{key:"setSidesStroke",value:function(e){this.props.polygon.setSides({strokeWeight:parseFloat(e)})}},{key:"render",value:function(){var e=this;return n.a.createElement("div",{className:"controls"},n.a.createElement("h1",null,"Playing with Polygons You Control!"),n.a.createElement(S,null),n.a.createElement("fieldset",null,n.a.createElement("div",null,this.props.controls.map(function(t,s){return n.a.createElement(k,{options:t,index:s,onChangeFn:e.inputUpdate,key:"control".concat(s+1)})}))))}}]),t}(a.Component);y.defaultProps={controls:[{title:"Spin Speed",inputType:"range",inputAttributes:{min:.001,max:.1,step:.001,defaultValue:.01},updates:"spinSpeed",group:"spin"},{title:"Scale Speed",inputType:"range",inputAttributes:{min:.1,max:5,step:.1,defaultValue:2},updates:"scaleSpeed"},{title:"Spin Clockwise",inputType:"checkbox",inputAttributes:{defaultChecked:!0},updates:"spinDirection",group:"spin"},{title:"Scale Max",inputType:"range",inputAttributes:{min:200,max:500,step:1,defaultValue:200},updates:"scaleRangeMax"},{title:"Spinning",inputType:"checkbox",inputAttributes:{defaultChecked:!0},updates:"spinningStatus"},{title:"Scale Min",inputType:"range",inputAttributes:{min:0,max:200,step:1,defaultValue:50},updates:"scaleRangeMin"},{title:"Points Amount",inputType:"range",inputAttributes:{min:2,max:12,step:1,defaultValue:6},updates:"pointsAmount"},{title:"Scaling",inputType:"checkbox",inputAttributes:{defaultChecked:!0},updates:"scalingStatus"},{title:"Dots Enabled",inputType:"checkbox",inputAttributes:{defaultChecked:!0},updates:"dotsStatus"},{title:"Shape Y",inputType:"range",inputAttributes:{min:-400,max:400,step:1,defaultValue:0},updates:"shapeCentreY"},{title:"Dots Size",inputType:"range",inputAttributes:{min:1,max:20,step:.5,defaultValue:3},updates:"dotsSize"},{title:"Shape X",inputType:"range",inputAttributes:{min:-400,max:400,step:1,defaultValue:0},updates:"shapeCentreX"},{title:"Dots Stroke",inputType:"range",inputAttributes:{min:0,max:10,step:.5,defaultValue:.5},updates:"dotsStroke"},{title:"Sides Enabled",inputType:"checkbox",inputAttributes:{defaultChecked:!0},updates:"sidesStatus"},{title:"Dots Fill Colour",inputType:"text",inputAttributes:{defaultValue:"DarkOrange, DarkSeaGreen"},updates:"dotsFillColours"},{title:"Sides Stroke",inputType:"range",inputAttributes:{min:.1,max:10,step:.1,defaultValue:.1},updates:"sidesStroke"},{title:"Dots Stroke Colour",inputType:"text",inputAttributes:{defaultValue:"DarkViolet"},updates:"dotsStrokeColours"},{title:"Side Stroke Colour",inputType:"text",inputAttributes:{defaultValue:"Indigo, Khaki, LawnGreen"},updates:"sidesStrokeColours"},{title:"Active",inputType:"checkbox",inputAttributes:{defaultChecked:!0},updates:"activeStatus"}]};var k=function(e){var t=e.options,s=e.index,a=e.onChangeFn,o=t.title,i=t.inputAttributes,l=t.updates,r=t.inputType,u=t.group,p="controlLabel".concat(s+1);return n.a.createElement(n.a.Fragment,null,n.a.createElement("label",{htmlFor:p,className:"label-".concat(u)},o),n.a.createElement("input",Object.assign({},i,{id:p,type:r,onChange:a,"data-updates":l,className:"input-".concat(u)})))},S=function(e){var t=e.hide;return n.a.createElement(n.a.Fragment,null,t?null:n.a.createElement(n.a.Fragment,null,n.a.createElement("p",null,"Thanks for Checking out my little demo!"),n.a.createElement("p",null,"This is a mid way prototype but I hope you have fun all the same"),n.a.createElement("p",null,"Tweak around with the sliders and see what shapes you can make"),n.a.createElement("p",null,n.a.createElement("strong",null,"Click the Display Area to wipe it clean")),n.a.createElement("p",null,"Try Adding colour, you can use HEX or words"," ",n.a.createElement("a",{href:"https://www.w3schools.com/colors/colors_hex.asp"},"CSS's Named Colours")," ","be sure to separate each colour by (",n.a.createElement("strong",null,","),")"),n.a.createElement("p",null,"Some colours to start you off are"," ",n.a.createElement("strong",null,"Gold, Maroon, Azure, MidnightBlue, DarkOrchid "))))},f=y,b=s(10),v=s.n(b),m=function(e){function t(e){var s;return Object(r.a)(this,t),(s=Object(p.a)(this,Object(c.a)(t).call(this,e))).state={polygon:{},controls:{status:{active:!0,paused:!1,spinning:!0,scaling:!0,dotsEnabled:!0,sidesEnabled:!0},spin:{speed:1,isClockwise:!0},scale:{range:{max:100,min:50},speed:2},shape:{centre:{x:0,y:0},points:6},dots:{fillColours:["#000","#fff"],stokeColours:["#000","#fff"],strokeWeight:.5,size:3},sides:{stokeColours:["#000","#fff"],strokeWeight:.1}},p5Sketch:{}},s.createP5Sketch=function(e){var t={},a=g.defaultPolygon,n=a.initialPositions,o={spin:a.spin,scale:a.scale,status:a.status,dots:a.dots,sides:a.sides,shape:a.shape};e.setup=function(){e.createCanvas(e.windowWidth,e.windowHeight/2).mouseClicked(function(){e.background(230)});var a=Object(l.a)({},n,{centre:{x:e.width/2,y:e.height/2}});t=new g(e,a,o),s.setState({polygon:t}),e.background(230)},e.draw=function(){t.draw()}},s.sketchRef=n.a.createRef(),s}return Object(h.a)(t,e),Object(u.a)(t,[{key:"componentDidMount",value:function(){this.setState({p5Sketch:new v.a(this.createP5Sketch,this.sketchRef.current)})}},{key:"render",value:function(){var e=this.state.polygon;return n.a.createElement(n.a.Fragment,null,n.a.createElement(f,{polygon:e}),n.a.createElement("div",{ref:this.sketchRef}))}}]),t}(a.Component);i.a.render(n.a.createElement(m,null),document.getElementById("root"))}},[[11,2,1]]]);
//# sourceMappingURL=main.5ab9c220.chunk.js.map